package org.universAAL.eventSelectionTool.server.impl;

import gr.anco.persona.agenda.ont.Calendar;
import gr.anco.persona.agenda.ont.Event;
import gr.anco.persona.agenda.ont.EventDetails;
import gr.anco.persona.agenda.ont.TimeInterval;
import gr.anco.persona.db.PseudoDB;
import gr.anco.persona.eventSelectionTool.ont.EventComparator;
import gr.anco.persona.eventSelectionTool.ont.EventSelectionTool;
import gr.anco.persona.eventSelectionTool.ont.FilterParams;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import javax.xml.datatype.XMLGregorianCalendar;


public class MyEventSelectionTool 
{
	//DummyList for events
	private List eventsDummyList;
	private ArrayList listeners;
	private List calendarsDummyList;
	private EventSelectionTool esTool;

	public MyEventSelectionTool() {
		initCalendarList();
//		eventsDummyList=new ArrayList();
		listeners = new ArrayList();		
//		calendarsDummyList=new ArrayList();
//
//		//1st event
//		//20.2.2011, 15:30
//		XMLGregorianCalendar beginXmlGregorianCalendar = 
//							TypeMapper.getDataTypeFactory().newXMLGregorianCalendar(2011, 2, 20, 15, 30, 0, 0, +2);
//
//		//27.2.2011, 17:30
//		XMLGregorianCalendar endXmlGregorianCalendar = 
//						TypeMapper.getDataTypeFactory().newXMLGregorianCalendar(2011, 2, 27, 17, 30, 0, 0, +2);
//		
//		Event e1 = createEvent(1, "Work", "EL", "Thessaloniki", "Work appointment", beginXmlGregorianCalendar, endXmlGregorianCalendar);
//		eventsDummyList.add(e1);
//		
//		//2nd event
//		//31.12.2009, 15:30
//		beginXmlGregorianCalendar =
//			TypeMapper.getDataTypeFactory().newXMLGregorianCalendar(2009, 12, 31, 15, 30, 0, 0, +2);
//		//31.12.2009, 17:30
//		endXmlGregorianCalendar =	
//			TypeMapper.getDataTypeFactory().newXMLGregorianCalendar(2009, 12, 31, 17, 30, 0, 0, +2);
//		
//		Event e2 = createEvent(2, "Social", "DE", "Veria", "Social event", beginXmlGregorianCalendar, endXmlGregorianCalendar);
//		eventsDummyList.add(e2);
//
//		//3rd event
//		//31.12.2010, 12:30
//		beginXmlGregorianCalendar =
//			TypeMapper.getDataTypeFactory().newXMLGregorianCalendar(2010, 12, 31, 12, 30, 0, 0, +2);
//		//31.12.2010, 15:30
//		endXmlGregorianCalendar =	
//			TypeMapper.getDataTypeFactory().newXMLGregorianCalendar(2010, 12, 31, 15, 30, 0, 0, +2);
//		
//		Event e3 = createEvent(3, "Social", "EN", "Larissa", "Social festival", beginXmlGregorianCalendar, endXmlGregorianCalendar);
//		eventsDummyList.add(e3);
//		
//		//1st calendar - Work
//		Calendar workAgenda = new Calendar(Calendar.MY_URI + "KostasWork"); //{e1}
//		workAgenda.addEvent(e1);
//		//2nd calendar - Social
//		Calendar socialAgenda = new Calendar(Calendar.MY_URI + "KostasSocial");//{e3, e2}
//		//socialAgenda.addEvent(e1);
//		socialAgenda.addEvent(e2);
//		socialAgenda.addEvent(e3); 
//		calendarsDummyList.add(workAgenda);
//		calendarsDummyList.add(socialAgenda);
		
		
		esTool = new EventSelectionTool(EventSelectionTool.MY_URI + "default");
	}
	
	private void initCalendarList() {
		PseudoDB db = PseudoDB.getInstance();
		calendarsDummyList = db.getAllCalendars();		
	}
	
	//The following function is just for test; creates events	
	private Event createEvent(int id, String category, String spokenLanguage, String place,
			String description,
			XMLGregorianCalendar BeginxmlGregorianCalendar,
			XMLGregorianCalendar EndxmlGregorianCalendar) {
		
		// start Event Details
		EventDetails ed = new EventDetails(EventDetails.MY_URI + "Detail" + id);
		ed.setCategory(category);
		ed.setSpokenLanguage(spokenLanguage);
		ed.setPlaceName(place);
		ed.setDescription(description);
		
		TimeInterval timeInterval  = new TimeInterval(TimeInterval.MY_URI + id);
		timeInterval.setStartTime(BeginxmlGregorianCalendar);
		timeInterval.setEndTime(EndxmlGregorianCalendar);
		ed.setTimeInterval(timeInterval);
		
		Event event = new Event(Event.MY_URI + "DummyEvent" + id);
		event.setEventDetails(ed);
				
		return event;
	}

	

	public void addListener(EventSelectionListener l)	{
		listeners.add(l);
	}
	
	public void removeListener(EventSelectionListener l) {
		listeners.remove(l);
	}

	
	//The real function: List <Event> requestEvent(filterParams filterParamas)	
	public List requestEvents(FilterParams filterParams) {
		initCalendarList();
		esTool.clearPreviousData();
		esTool.setFilterParams(filterParams);
		esTool.setCalendars(calendarsDummyList);
		List list = esTool.getFilteredEvents();
		//sort them (start time) and send them back
		Collections.sort(list, new EventComparator());
		return list;
	}
	
	
	public List requestFromCalendarEvents(FilterParams filterParams, List calendarList) {
		initCalendarList();
		esTool.clearPreviousData();
		esTool.setFilterParams(filterParams);
		if (calendarList == null || calendarList.size() == 0) {
			esTool.setCalendars(calendarsDummyList);
		} else {
			for (Iterator it = calendarList.iterator(); it.hasNext();) {
				Calendar cal = this.getCalendarFromURI(((Calendar) it.next()).getURI());
				
				if (cal != null) {
					esTool.addCalendar(cal);
				}				
			}
		}
		List list = esTool.getFilteredEvents();
		//sort them (start time) and send them back
		Collections.sort(list, new EventComparator());
		return list;
	}
	
	public List requestFromCalendarLimitedEvents(FilterParams filterParams, List calendarList, int maxEventNo) {
		initCalendarList();
		esTool.clearPreviousData();
		esTool.setFilterParams(filterParams);
		if (calendarList == null || calendarList.size() == 0) {
			esTool.setCalendars(calendarsDummyList);
		} else {
			for (Iterator it = calendarList.iterator(); it.hasNext();) {
				Calendar cal = this.getCalendarFromURI(((Calendar) it.next()).getURI());
				
				if (cal != null) {
					esTool.addCalendar(cal);
				}				
			}		
		} 
		return esTool.getLimitedFilteredEvents(maxEventNo);
	}
	
	public List requestFollowingEvents(List calendarList, int maxEventNo) {
		initCalendarList();
		esTool.clearPreviousData();
		
		if (calendarList == null || calendarList.size() == 0) {
			esTool.setCalendars(calendarsDummyList);
		} else {
			for (Iterator it = calendarList.iterator(); it.hasNext();) {
				Calendar cal = this.getCalendarFromURI(((Calendar) it.next()).getURI());
				
				if (cal != null) {
					esTool.addCalendar(cal);
				}				
			}		
		}		
		return esTool.getFollowingEvents(maxEventNo);
	}
	
	private Calendar getCalendarFromURI(String CalendarURI)	{
		initCalendarList();
		Calendar calendar = null;
		
		for (Iterator it = calendarsDummyList.iterator(); it.hasNext();) {
			calendar = (Calendar) it.next();
			if (calendar.getURI().equals(CalendarURI))
				//
				return calendar;
		}
		return null;
	}	
}
