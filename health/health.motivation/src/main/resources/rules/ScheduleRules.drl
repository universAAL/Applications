#created on: 16-nov-2011
package org.universAAL.AALApplication.health.motivation.schedule

#list any import classes here.
import org.universaal.ontology.health.owl.*;
import org.universAAL.AALApplication.health.motivation.testSupportClasses.TreatmentTypeClassification;
import org.universAAL.AALApplication.health.motivation.schedulingTools.TreatmentPlanningToiCal;
import org.universAAL.AALApplication.health.motivation.testSupportClasses.TreatmentTypeClassification.ByMeasurement;
import org.universAAL.AALApplication.health.motivation.testSupportClasses.TreatmentTypeClassification.ByRecurrence;
import org.universAAL.AALApplication.health.motivation.testSupportClasses.TreatmentTypeClassification.ByDuration;
import org.universAAL.AALApplication.health.motivation.schedulingTools.Treatment4Rules;
import org.universAAL.AALApplication.health.motivation.testSupportClasses.SessionNotPerformed;

#declare any global variables here

/*
rule "Increase treatment completenss" // depende del estado motivacional en el que nos encontremos para mandar un mensaje u otro al AP
	when
		ps: PerformedSession(isValid == Boolean.TRUE) // cuando se detecte una planned session v�lida (ha tenido que pasar antes por las reglas de Schedule, para determinar esto)
	then
		Treatment t = ps.getAssociatedTreatment(); //este m�todo no le tengo, le tengo que crear
		t.addPerformedSession(ps); //a�adimos la performed session al treatment.
		float currentCompleteness = t.getCompleteness();
		t.setCompleteness(t.getCompletenessUnit() + currentCompleteness);
end
*/
/*
rule "Type of treatment declaration" no-loop
	when
		treatment: Treatment(treatmentPlanning != null)
		eval(!TreatmentTypeClassification.hasTTC(treatment))
	then
		TreatmentTypeClassification ttc = new TreatmentTypeClassification(treatment);
		insert (ttc);
end
*/
#----------------TREATMENT CLASSIFICATION ATTENDING TO MEASUREMENT-------------------------

/*
rule "No-measurement-assigned treatment type" no-loop
	when   
		ttc: TreatmentTypeClassification(associatedTreatment != null && tmeasure == null)
		eval(ttc.getAssociatedTreatment().hasMeasurementRequirements()== false)
	then
		ttc.setTreatmentByMeasurement(ByMeasurement.WITHOUT_MEASUREMENT);
		update (ttc);
end

rule "Measurement-assigned treatment type" no-loop
	when
		ttc: TreatmentTypeClassification(associatedTreatment != null && tmeasure == null) 
		eval(ttc.getAssociatedTreatment().hasMeasurementRequirements()== true)
	then
		ttc.setTreatmentByMeasurement(ByMeasurement.WITH_MEASUREMENT);
		update (ttc);
end

#----------------TREATMENT SPECIFITY-------------------------

rule "Fixed treatment" no-loop
	when
		ttc: TreatmentTypeClassification(associatedTreatment != null && trecur == null) // a�n no se ha definido la clasificaci�n por recurrencia
		eval(SchedulingTools.isDayDefined());
		eval(SchedulingTools.isHourDefined());
	then
		ttc.setTreatmentByRecurrence(ByRecurrence.FIXED);
		update (ttc);
end

rule "Flexible-defined treatment" no-loop
	when
		ttc: TreatmentTypeClassification(associatedTreatment != null && trecur == null) // a�n no se ha definido la clasificaci�n por recurrencia
		eval(SchedulingTools.isDayDefined());
		eval(!SchedulingTools.isHourDefined());		
	then
		ttc.setTreatmentByRecurrence(ByRecurrence.FLEXIBLE_DEFINED);
		update (ttc);
end

rule "Flexible-custom treatment" no-loop
	when
		ttc: TreatmentTypeClassification(associatedTreatment != null && trecur == null) // a�n no se ha definido la clasificaci�n por recurrencia
		eval(!SchedulingTools.isDayDefined());
		eval(!SchedulingTools.isHourDefined());	
	then
		ttc.setTreatmentByRecurrence(ByRecurrence.FLEXIBLE_CUSTOM);
		update (ttc);	
end

#----------------TREATMENT DURATION-------------------------
rule "Establish short term treatment" no-loop // menos de un mes
	when
		ttc: TreatmentTypeClassification(associatedTreatment != null && tdur == null)
		//eval ( (shortTermTreatment.getTreatmentPlanning()).getEndDate() - (shortTermTreatment.getTreatmentPlanning()).getStartDate() <= 30 )
		eval(SchedulingTools.isLessThanAMonth(associatedTreatment))
	then
		ttc.setTreatmentByDuration(ByDuration.SHORT_TERM);
		update (ttc);	
end

rule "Establish medium term treatment" no-loop // menos de seis meses
	when
		ttc: TreatmentTypeClassification(associatedTreatment != null && tdur == null)
		eval(SchedulingTools.isLess6Months())
	then
		ttc.setTreatmentByDuration(ByDuration.MEDIUM_TERM);
		update (ttc);
end

rule "Establish long term treatment" no-loop // m�s de seis meses y hasta un a�o
	when
		ttc: TreatmentTypeClassification(associatedTreatment != null && tdur == null)
		eval(SchedulingTools.isLessAYear())
	then
		ttc.setTreatmentByDuration(ByDuration.LONG_TERM);
		update (ttc);
end


rule "Establish fromNowOn treatment" no-loop // m�s de un a�o o sin fecha de fin definida
	when
		ttc: TreatmentTypeClassification(associatedTreatment != null && tdur == null)
		eval(SchedullingTools(!isEndDateDefined))// fecha de fin no definida
	then
		ttc.setTreatmentByDuration(ByDuration.FROM_NOW_ON);
		// el tratamiento tendr� una duraci�n por defecto a 18 meses, que es cuando se revisar� el caso 
		// con el m�dico y se continuar� en fase permanente de mantenimiento.
		update (ttc);
		
end

#----------------SESSION PLANNING-----------------------------

rule "Set planned sessions for fixed treatments" no-loop
	when
		treatment: Treatment()
		eval(mapOfTreatmentTypes.get(treatment).getTreatmentByRecurrence() == ByRecurrence.FIXED)
		eval(TreatmentTypeClassification.hasValidTTC(treatment)) //tiene completada la clasificaci�n del tratamiento
	then
		SchedulingTools.setListOfSessions(treatment);
end 
*/
/*
rule "First session for flexible treatments - once a day" no-loop // incluimos en este grupo los tratamientos definidos flexibles y los indefinidos
// estamos haciendo referencia a los tratamientos que tienen una realizaci�n al d�a
	when
		treatment: Treatment(treatmentPlanning != null && motivationalStatus == MotivationalStatusType.contemplation )
		definedFlexibleTreatment
		// la recurrencia no especifica el momento del d�a
	then
	// se establece la primera sesi�n para dentro de tres d�as, o sea, planned session con fecha para dentro de 3 d�as
	// es decir, elegimos el d�a
	// el momento en el que se realizar� lo especificamos para 3 horas despu�s de que el paciente se levante
	// (dato que habr� que recoger del historial del paciente) 
end

rule "First session for flexible treatments - several times a day" no-loop // incluimos en este grupo los tratamientos definidos flexibles y los indefinidos
// estamos haciendo referencia a los tratamientos que tienen m�s de una realizaci�n al d�a
	when
		treatment: Treatment(treatmentPlanning != null && motivationalStatus == MotivationalStatusType.contemplation )
		definedFlexibleTreatment
		// la recurrencia s� hace referencia al n�mero de veces al d�a que debe realizarse
	then
	// se establece la primera sesi�n para dentro de tres d�as, o sea, planned session con fecha para dentro de 3 d�as
	// es decir, elegimos el d�a
	// el momento en el que se realizar� lo especificamos en base a la recurrencia establecida y el rango
	// de horario que tenga el paciente (dato que habr� que recoger del historial del paciente, diferencia entre levantarse y acostarse)
	// m�ximo, cinco veces al d�a
end

rule "Re-schedule adjustment for flexible treatments" no-loop
	when
	// el usuario haya decidido otra fecha de inicio de tratamiento 
	// o sea, cuando recibamos la respuesta a una pregunta de cambio de fecha
	then
	// establecer esa fecha como la de la primera sesi�n
	// y mandar un mensaje para avisarle de que se le recordar� la primera sesi�n
end

rule "Fill calendar for undefined treatments"  no-loop
	when
		treatment: Treatment(treatmentPlanning != null)
		undefinedTreatment
		//se haya definido la primera sesi�n (hay una planned session)
	then
	//crear eventos (planned sessions) hasta la fecha de fin, teniendo en cuenta
	// el d�a que se estableci� la primera sesi�n, en base a la siguiente recurrencia: 
	// 1 y 2 mes: 1 vez a la semana
	// 3-6 mes: 2 veces a la semana
	// 7-12 mes: 3 veces a la semana
	// 13-18 mes: 4 veces a la semana	
end
*/

#----------------COMPLETENESS UNIT-----------------------------------
/*
rule "Set completeness unit" no-loop
	when
		treatment: Treatment(completenessUnit == 0)// a�n no se haya establecido la unidad de completitud
		eval(SchedulingTools.hasAssociatedListOfSessions()) // ya se ha establecido una lista de sesiones
	then
		DateList sessions = SchedulingTools.getPlannedSessions(treatment);
		treatment.setCompletenessUnit(calculateUnitOfCompleteness(sessions));
end

#----------------PERFORMED SESSION MEASURABLE TREATMENTS-----------------------------------

rule "Measure for 4-5 times a day performance" no-loop //4 a 5 veces al d�a
	when
	// el tratamieno lleve asociado medida y �sta sea autom�tica
	// y hayamos recibido le medida dentro de los quince primeros minutos
	then
	// la sesi�n se considerar� realizada 
end

rule "Measure for 4-5 times a day no performance" no-loop //4 a 5 veces al d�a
	when
	// el tratamieno lleve asociado medida y �sta sea autom�tica
	// y NO hayamos recibido le medida dentro de los quince primeros minutos
	then
	// alarma para que el usuario realice la acci�n 
end

rule "Measure for 4-5 times a day NOT performed" no-loop //4 a 5 veces al d�a
	when
	// el tratamieno lleve asociado medida y �sta sea autom�tica
	// y hayamos recibido le medida dentro de la primera media hora
	// quince primeros minutos + otros 15 de alarma
	then
	// la sesi�n se considerar� NO realizada 
end

rule "Measure for 2-3 times a day performance" no-loop
	when
	// el tratamieno lleve asociado medida y �sta sea autom�tica
	// y hayamos recibido le medida dentro de la primera media hora
	then
	// la sesi�n se considerar� realizada 
end

rule "Measure for 2-3 times a day no performance" no-loop 
	when
	// el tratamieno lleve asociado medida y �sta sea autom�tica
	// y NO hayamos recibido le medida dentro de la primera media hora
	then
	// alarma para que el usuario realice la acci�n 
end

rule "Measure for 2-3 times a day NOT performed" no-loop 
	when
	// el tratamieno lleve asociado medida y �sta sea autom�tica
	// y NO hayamos recibido le medida dentro de la primera hora
	then
	// la sesi�n se considerar� NO realizada 
end

rule "Measure once a day performance" no-loop
	when
	// el tratamiento lleve asociado una medida
	// hemos recibido la medida en un margen de una hora
	then
	// la sesi�n se considerar� como realizada
end

rule "Measure once a day no performance" no-loop
	when
	// el tratamiento lleve asociado una medida
	// NO hemos recibido la medida en un margen de una hora 
	then
	// alarma para que el usuario realice la acci�n o introduzca la medida
end

rule "Measure once a day not performed" no-loop
	when
	// el tratamiento lleve asociado una medida
	// NO hemos recibido la medida en un margen de dos horas 
	then
	// la sesi�n se considerar� como NO realizada
end

rule "Lost measurement" no-loop
	when
	// se detecte una performed sesi�n y no podemos asignarla a ninguna sesi�n
	// porque no cumple ninguno de los rangos anteriores
	then
	// almacenarla dentro de un array de sesiones perdidas
end

#----------------PERFORMED SESSION NON-MEASURABLE TREATMENTS-----------------------------------

rule "Performed Session out of day" no-loop
	when
		ps: PerformedSession()
		eval(!SchedulingTools.isThereASessionToday(treatment))
	then
		SessionsPerformance.addOutOfDateSession(ps);
		//enviar mensaje al usuario
end
*/
rule "Session performed in right interval of time" no-loop
	
	// esta regla se lanza cada 5 minutos
	
	when
		treatment: Treatment4Rules(lss:lastSessionStart, lse:lastSessionEnd, lsewei:lastSessionWithExtraInterval, n:now) // no coge los getters
		eval( (n >= lse && n <= lsewei) || (n >= lss && n <= lse)) // ahora esta dentro del performing interval
		ps: PerformedSession(associatedTreatment == treatment)
	// y recibo una performed session en el intervalo correcto...
	then
		ps.setIsValid(true)//sesi�n realizada: la ps se pone como v�lida y se a�ade en un array de sesiones realizadas
		PerformedSessionsSupport.insertValidPerformedSession;		
end

rule "Session not performed in performing interval" 
// esta regla se lanza cada 5 minutos
	when
		treatment: Treatment4Rules(lss:lastSessionStart, lse:lastSessionEnd, lsewei:lastSessionWithExtraInterval, n:now) // no coge los getters
		eval(n >= lse && n <= lsewei) // ahora esta dentro del performing interval
		not PerformedSession(associatedTreatment == treatment)// no se ha recibido una PS que tenga nuestro tratamiento asociado
		eval(!TestIface.messageSentToAPSince(HeartFailure.MY_URI, 
											Treatment.MY_URI,
                                        	MotivationalStatusType.action, 
                                        	MotivationalMessageClassification.reminder, 
                                        	MotivationalMessageSubclassification.session_performance_alert, 
                                        	treatment, 
                                        	treatment.getLastSessionEnd()))
		// si no he recibido una performed session en el intervalo de performing interval
		// y no he mandado mensaje al usuario
	then
	//mandar mensaje al usuario para que haga la sesi�n o introduzca la medida.	S�lo v�lido para action...
		MessageVariables.addToMapOfVariables("treatmentName", treatment.getName());
		
        MessageManager.sendMessageToAssistedPerson(HeartFailure.MY_URI, 
        								Treatment.MY_URI,
                                        MotivationalStatusType.action, 
                                        MotivationalMessageClassification.reminder, 
                                        MotivationalMessageSubclassification.session_performance_alert, 
                                        treatment);
        System.out.println("Assisted person notified of not received performed session");
end

rule "Session not performed in extra interval" 
// esta regla se lanza cada 5 minutos
	when
		treatment: Treatment4Rules(lss:lastSessionStart, lse:lastSessionEnd, lsewei:lastSessionWithExtraInterval, n:now) // no coge los getters
		eval(n >lsewei) // ahora esta dentro del performing interval
		not PerformedSession(associatedTreatment == treatment)// no se ha recibido una PS que tenga nuestro tratamiento asociado
	then
		//la sesi�n no se ha realizado.
		SessionNotPerformed snp = new SessionNotPerformed(lss,treatment);
		insert(snp);
		//introducir un objeto de una clase en la wm para avisar que la sesi�n no se ha hecho
		//tendr� que eliminarse en la regla que se active del fichero correspondiente.
        System.out.println("Assisted person hasn't performed last session");
end

/*

rule "4-5 times a day performance" no-loop //4 a 5 veces al d�a
	when
		ps: PerformedSession( t: associatedTreatment)
		// hay que relacionarla con su treatment: Treatment()
		eval(SchedulingTools.isThereASessionToday(SchedulingTools.getPlannedSessions(t) ))
		eval(SchedulingTools.treatmentPerformed4To5ADay(treatment))
		eval(SchedulingTools.sessionPerformedAfter15minutes(treatment, ps) )// y hayamos recibido le medida dentro de los quince primeros minutos
	then
		ps.setIsValid(true); // la sesi�n se da por realizada 
		SessionPerformance.addPerformedSession(ps);
end

rule "Measure for 4-5 times a day no performance" no-loop //4 a 5 veces al d�a
	when
		t : Treatment( treatmentPlanning.( sd : startDate, ed : endDate ))
		not PerformedSession( )
		now > 
		eval(SchedulingTools.isThereASessionToday(SchedulingTools.getPlannedSessions(treatment) ))
		// hay que relacionarla con su treatment: Treatment()
		eval(mapOfTreatmentTypes.get(treatment).getTreatmentByMeasurement() == ByMeasurement.WITHOUT_MEASUREMENT)
		eval(SchedulingTools.treatmentPerformed4To5ADay(treatment))
		eval(!SchedulingTools.sessionPerformedAfter15minutes(treatment, ps) )// y NO hayamos recibido le medida dentro de los quince primeros minutos
		// el tratamieno no lleve asociado medida y �sta sea autom�tica
		// y NO hayamos recibido le medida dentro de los quince primeros minutos
	then
	// alarma para que el usuario introduzca la medida o ejecute la acci�n (mensaje o sonido)?
end

rule "Measure for 4-5 times a day NOT performed" no-loop //4 a 5 veces al d�a
	when
		// hay que relacionarla con su treatment: Treatment()
		eval(SchedulingTools.isThereASessionToday(SchedulingTools.getPlannedSessions(treatment) ))
		eval(mapOfTreatmentTypes.get(treatment).getTreatmentByMeasurement() == ByMeasurement.WITHOUT_MEASUREMENT)
		eval(SchedulingTools.treatmentPerformed4To5ADay(treatment))
		eval(!SchedulingTools.sessionPerformedAfter30minutes(treatment, ps) )
	// y no hayamos recibido le medida dentro de la primera media hora
	// quince primeros minutos + otros 15 de alarma (total 30 minutos)
	then
		SessionPerformance.addNotPerformedSession(Date d); // la sesi�n se considerar� NO realizada 
end

rule "Measure for 2-3 times a day performance" no-loop
	when
	// y hayamos recibido le medida dentro de la primera media hora
	then
	// la sesi�n se considerar� realizada 
end

rule "Measure for 2-3 times a day no performance" no-loop 
	when
	// el tratamieno lleve asociado medida y �sta sea autom�tica
	// y NO hayamos recibido le medida dentro de la primera media hora
	then
	// alarma para que el usuario realice la acci�n 
end

rule "Measure for 2-3 times a day NOT performed" no-loop 
	when
	// el tratamieno lleve asociado medida y �sta sea autom�tica
	// y NO hayamos recibido le medida dentro de la primera hora
	then
	// la sesi�n se considerar� NO realizada 
end

rule "Measure once a day performance" no-loop
	when
		ps: PerformedSession()
		eval(SchedulingTools.isThereASessionToday(SchedulingTools.getPlannedSessions(treatment) ))
		eval(SchedulingTools.treatmentPerformedOnceADay(treatment))
		eval(SchedulingTools.sessionPerformedAfter1Hour(treatment, ps) )
	// el tratamiento lleve asociado una medida
	// hemos recibido la medida en un margen de una hora
	then
		ps.setIsValid(true); // la sesi�n se da por realizada 
		SessionPerformance.addPerformedSession(ps);// la sesi�n se considerar� como realizada
		update(ps);
end

rule "Measure once a day no performance" no-loop
	when
	//el tratamiento lo saco de la lista de tratamientos detectados?
	// el tratamiento lleve asociado una medida
	// NO hemos recibido la medida en un margen de una hora 
	then
	// alarma para que el usuario realice la acci�n o introduzca la medida
end

rule "Once a day for healthy habits treatment performance" no-loop
	when
	// el tratamiento no lleve asociado una medida
	// sea de tipo healthy habits
	then
	// se preguntar� al usuario si la ha realizado
end

rule "Once a day for healthy habits treatment not performed" no-loop
	when
	// la respuesta a la pregunta anterior sea no
	then
	// se archivar� la planned sessi�n en array de sesiones no realizadas
end

rule "Once a day for healthy habits treatment performed" no-loop
	when
	// la respuesta al mensaje anterior sea s�
	then
	// se archivar� en el array de sesiones realizadas
end

rule "Not in time measurement"
	when
	// la medida se detecte, hoy haya sesi�n, pero no est� dentro de los rangos establecidos
	then
	// se mete dentro de array de sessiones perdidas
end

rule "Check performance at the end of the day"
	when
	// hoy tocase medida y no se haya recibido nada a �ltima hora
	then
	// preguntar al usuario si lo hizo y en caso afirmativo preguntar cuando
end

rule "Find lost session"
	when
	 // la respuesta al mensaje anterior sea s� y haya un tiempo asociado
	then
	// buscar la sesi�n en el array de sesiones perdidas
	// introducirlo en el array de sesiones realizadas
	// cambiar el par�metro validez a v�lido
	// aumentar la completitud del tratamiento
end

#----------------REMINDERS-----------------------------------
#----------------FEEDBACK/evolution-----------------------------------
#----------------reward----------------------------------
rule "" no-loop
	when
	// 
	then
	//
	//
end
*/
