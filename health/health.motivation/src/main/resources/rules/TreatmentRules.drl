#created on: 17-oct-2011
package org.universAAL.AALApplication.health.motivation.treatment

#list any import classes here. 
import org.universaal.ontology.health.owl.Treatment;
import org.universaal.ontology.health.owl.PerformedSession;
import org.universAAL.AALApplication.health.motivation.motivatonalMessageManagement.MessageManager;
import org.universaal.ontology.owl.MotivationalMessageClassification;
import org.universaal.ontology.owl.MotivationalMessageSubclassification;
import org.universaal.ontology.health.owl.MotivationalStatusType;
import org.universaal.ontology.ICD10CirculatorySystemDiseases.owl.HeartFailure;
import org.universAAL.AALApplication.health.motivation.motivatonalMessageManagement.MessageVariables;
import org.universAAL.AALApplication.health.motivation.testSupportClasses.PerformedSessionsSupport;
import org.universaal.ontology.owl.ChoiceLabel;
import org.universaal.ontology.owl.MotivationalMessageClassification;
import org.universaal.ontology.owl.MotivationalMessageSubclassification;
import org.universaal.ontology.owl.MotivationalQuestionnaire;
import org.universaal.ontology.owl.Questionnaire;
import org.universaal.ontology.owl.SingleChoiceQuestion;
import org.universAAL.AALApplication.health.motivation.testSupportClasses.DetectedTreatments;
import org.universaal.ontology.owl.AnsweredQuestionnaire;
import org.universaal.ontology.owl.Questionnaire4TreatmentStrategy;
import org.universaal.ontology.owl.Answer;
import org.universAAL.AALApplication.health.motivation.schedulingTools.SchedulingTools;
import org.universaal.ontology.health.owl.StatusType;
import org.universAAL.AALApplication.health.motivation.testSupportClasses.PerformedSessionsSupport;
import org.universaal.ontology.health.owl.WeightMeasurementTreatment;

#declare any global variables here 
global SingleChoiceQuestion agreementQuestion;
global MotivationalQuestionnaire firstQuestionnaire;
	

#Whenever a treatment is detected a consent message is sent to the user
rule "Treatment Detection" no-loop  
	
	when
		detectedTreatment: Treatment(name != "") # A new treatment, with a name, is detected
		eval(!DetectedTreatments.containsTreatment(detectedTreatment))
	then 
		MessageVariables.addToMapOfVariables("treatmentName", detectedTreatment.getName());
		MessageVariables.addToMapOfVariables("treatmentDescription", detectedTreatment.getDescription());
		
        MessageManager.sendMessageToAssistedPerson(HeartFailure.MY_URI, Treatment.MY_URI,
                                        MotivationalStatusType.precontemplation, MotivationalMessageClassification.inquiry, MotivationalMessageSubclassification.treatment_agreement, detectedTreatment);
        
        DetectedTreatments.insertDetectedTreatment(detectedTreatment);
        System.out.println("Treatment " + detectedTreatment.getName()+ " detected."); //trace
end 

rule "Change to contemplation phase - Treatment performance agreement" no-loop
	when
		#When the aswered questionnaire to the first question is received
		detectedAnsweredQuestionnaire: AnsweredQuestionnaire(questionnaire : associatedQuestionnaire, answers != null, answers.length > 0,  answers[0].answerContent == true)
		eval(questionnaire instanceof Questionnaire4TreatmentStrategy)
		eval(questionnaire.getName() == (((Questionnaire)firstQuestionnaire.getContent()).getName()) )// esto va a fallar, mejor nombre
	then  
	 	Treatment t = ((Questionnaire4TreatmentStrategy)questionnaire).getAssociatedTreatment();
	 	t.setMotivationalStatus(MotivationalStatusType.contemplation); #the motivational status of the treatment is changed to contemplation 
	 	
	 	#A message is sent to the caregiver to notify him/her that the user agrees to follow the treatment
	 	MessageManager.sendMessageToCaregiver(HeartFailure.MY_URI, Treatment.MY_URI,
                                        MotivationalStatusType.precontemplation, MotivationalMessageClassification.notification, MotivationalMessageSubclassification.treatment_performance_agreement, t);
		
		System.out.println("Motivational status of assisted person changed to contemplation, froma precontemplation"); #trace
		
		//¿tengo que volver a insertar el tratamiento (actualizarlo) o no hace falta?
end


// rule "Change to contemplation phase - Agreement due to motivartional cycles"

rule "Stay in precontemplation phase - Treatment performance disagreement" no-loop
	when
		detectedAnsweredQuestionnaire: AnsweredQuestionnaire(questionnaire:associatedQuestionnaire  == firstQuestionnaire)
		AnsweredQuestionnaire(answers[0].answerContent == Boolean.FALSE )
		eval(questionnaire instanceof Questionnaire4TreatmentStrategy)
	then 
		Treatment t = ((Questionnaire4TreatmentStrategy)questionnaire).getAssociatedTreatment();
	 	t.setMotivationalStatus(MotivationalStatusType.contemplation); #the motivational status of the treatment is changed to contemplation 
	 	
	 	MessageManager.sendMessageToCaregiver(HeartFailure.MY_URI, Treatment.MY_URI,
                                        MotivationalStatusType.precontemplation, MotivationalMessageClassification.notification, MotivationalMessageSubclassification.treatment_performance_disagreement, t);
		
	 	System.out.println("Motivational status of assisted person still remains in precontemplation."); #trace
	
end

rule "Change to action phase from contemplation phase" no-loop
	when
	//cuando se detecta que la primera tarea ha sido realizada
		treatment: Treatment(completeness !=0)
		eval (treatment.getCompleteness()== treatment.getCompletenessUnit())
	then 
		treatment.setMotivationalStatus(MotivationalStatusType.action); # el estado del tratamiento cambia a action
		
		MessageVariables.addToMapOfVariables("treatmentName", treatment.getName());
		
		MessageManager.sendMessageToCaregiver(HeartFailure.MY_URI, Treatment.MY_URI,
                                        MotivationalStatusType.contemplation, MotivationalMessageClassification.notification, MotivationalMessageSubclassification.treatment_performance_agreement, treatment);
		
		System.out.println("Assisted person changed her/his motivational status to contemplation."); #trace
end

rule "Change to maintenance phase from action phase"  no-loop
	when
		treatment:  Treatment(completeness > 85) # when the 85% threshold is passed
		eval(treatment.getMotivationalStatus() == MotivationalStatusType.action) # and we come from the action phase
	then 
		treatment.setMotivationalStatus(MotivationalStatusType.maintenance); # treatment motivational status changes to maintenance
		
		MessageVariables.addToMapOfVariables("treatmentName", treatment.getName());
		
		MessageManager.sendMessageToCaregiver(HeartFailure.MY_URI, Treatment.MY_URI,
                                        MotivationalStatusType.action, MotivationalMessageClassification.notification, MotivationalMessageSubclassification.treatment_performance_agreement, treatment);
		
		System.out.println("Assisted person changed her/his motivational status to maintenance."); #trace
end


rule "Change to precontemplation phase from contemplation phase"  no-loop
	when
	//cuando no se haya realizado la primera actividad en 3 oportunidades
		treatment: Treatment(motivationalStatus == MotivationalStatusType.contemplation)
	 	eval(PerformedSessionsSupport.mapOfPSSupport.containsKey(treatment))
	 	eval( PerformedSessionsSupport.mapOfPSSupport[treatment].getNumberOfConsecutiveNonPerformedSessionsCont()== PerformedSessionsSupport.numberOfNonPerformanceAllowed)
	then
		treatment.setMotivationalStatus(MotivationalStatusType.precontemplation);
		MessageVariables.addToMapOfVariables("treatmentName", treatment.getName());
		MessageManager.sendMessageToCaregiver(HeartFailure.MY_URI, Treatment.MY_URI, MotivationalStatusType.contemplation, MotivationalMessageClassification.notification, MotivationalMessageSubclassification.treatment_performance_disagreement, treatment);
end

/*
rule "Change to contemplation phase from action phase"  no-loop
	when
	//cuando no se haya realizado tres de las sesiones establecidas
		treatment: Treatment(motivationalStatus == MotivationalStatusType.action)
		eval (PerformedSessionsSupport.getNumberOfActionNonPerformedSessions()==numberOfNonPerformanceAllowed)
	 
	then
	//se pasa del estado de action a contemplation y se toma la siguiente sesiï¿½n como si fuera la primera 
	// se activan las reglas de contemplation
	treatment.setMotivationalStatus(MotivationalStatusType.contemplation);
	MessageVariables.addToMapOfVariables("treatmentName", treatment.getName());
	
	MessageManager.sendMessageToCaregiver(HeartFailure.MY_URI, Treatment.MY_URI, MotivationalStatusType.action, MotivationalMessageClassification.notification, MotivationalMessageSubclassification.treatment_performance_disagreement);
		 
end

rule "Change to action phase from maintenance phase"  no-loop
	when
	//cuando no se haya realizado cinco de las sesiones establecidas
		treatment: Treatment(motivationalStatus == MotivationalStatusType.maintenance)
		eval (PerformedSessionsSupport.getNumberOfActionNonPerformedSessions()== PerformedSessionsSupport.numberOfNonPerformanceAllowedMaintenance)
	then
	//se pasa del estado de maintenance a action, en su parte de rutina
	treatment.setMotivationalStatus(MotivationalStatusType.action);   
	treatment.setCompleteness(70.0);
	MessageVariables.addToMapOfVariables("treatmentName", treatment.getName());
	MessageManager.sendMessageToCaregiver(HeartFailure.MY_URI, Treatment.MY_URI, MotivationalStatusType.maintenance, MotivationalMessageClassification.notification, MotivationalMessageSubclassification.treatment_performance_disagreement);
end

*/
/*

rule "Change status to active" no-loop
	timer (cron: 0 0 0 * * ?) //esta regla se activa cada 24h, a las 0:00
	when
		treatment: Treatment(status == StatusType.planned)// la fecha actual coincida con la de inicio de tratamiento
		eval(SchedulingTools.treatmentStartsToday)
	then
		treatment.setStatus(StatusType.actived)// cambia el estado del tratamiento a activo 
end


rule "Change status to finished"  no-loop
	when
		treatment: Treatment(completeness == 100)
		eval(SchedulingTools.treatmentEndsToday(treatment) || SchedulingTools.treatmentEndsAfterToday(treatment))	
	// llegue la fecha de fin del tratamiento sea mayor o igual que la fecha actual
	// y la completitud sea del 100%
	then
		treatment.setStatus(StatusType.finished);// cambia el estado del tratamiento a terminado
		
		MessageVariables.addToMapOfVariables("treatmentName", treatment.getName());
		 
		MessageManager.sendMessageToCaregiver(HeartFailure.MY_URI, Treatment.MY_URI, MotivationalStatusType.maintenance, MotivationalMessageClassification.notification, MotivationalMessageSubclassification.treatment_status_finished);
		MessageManager.sentMessageToAP(HeartFailure.MY_URI, Treatment.MY_URI, MotivationalStatusType.maintenance, MotivationalMessageClassification.reward, MotivationalMessageSubclassification.treatment_status_finished);
		retract(treatment); //eliminamos el tratamiento de la working memory
		//hay que sacarlo también de los tratamientos detectados para poder volver a utilizar ese nombre
end


rule "Treatment prolonged inquiry" no-loop
	timer (cron: 0 0 0 * * ?) //esta regla se activa cada 24h, a las 0:00
	when
		treatment: Treatment(motivationalStatus == MotivationalStatusType.maintenance && completeness != 100 )
		eval(SchedulingTools.treatmentEndedBeforeToday()) // el tratamiento ya ha terminado y no ha sido completado
	// llegue la fecha de fin del tratamiento 
	// y la completitud no sea del 100%
	then
		MessageVariables.addToMapOfVariables("treatmentCompleteness", treatment.getCompleteness());
	
		MessageManager.sendMessageToCaregiver(HeartFailure.MY_URI, Treatment.MY_URI, MotivationalStatusType.maintenance, MotivationalMessageClassification.inquiry, MotivationalMessageSubclassification.treatment_status_prolonged);
	//notificamos al caregiver de que no ha terminado el tratamiento
	// y que si quiere prolongarlo.  
end

rule "Treatment cancelled" no-loop
	when
		treatment: Treatment(status == StatusType.cancelled) // el tratamiento se cancele (sólo puede hacerlo el caregiver)
	then
		// notificamos al usuario.
		retract(treatment); //eliminamos el tratamiento de la working memory
end

rule "Treatment prolonged" no-loop
	when
		// se detecte un treatment prolongado
		// y no se haya enviado un mensaje correspondiente al usuario 
	then
	// notificar al usuario
end
*/